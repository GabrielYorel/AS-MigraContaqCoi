/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ctascontablesypolizas;

import ctascontablesypolizas.clases.CDocumentos;
import java.awt.KeyEventDispatcher;
import java.awt.KeyboardFocusManager;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DecimalFormat;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Gabriel-Diaz
 */
public class Documentos extends javax.swing.JDialog {

    Connection conexion;
    private javax.swing.table.DefaultTableModel modelo;
    public Object[][] documentos;
    InterfaseContpaqi padre;
    String ipDef;
    String rutaDef;
    String cajaTexto;
    String filtroInicial;
    String tablaAconsultar;
    String filtroPeriodos;
    String filtroTipos;

    /**
     * Creates new form Almacenes
     */
    public Documentos(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        AsignarIconos();
        KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(new KeyEventDispatcher() {
            @Override
            public boolean dispatchKeyEvent(KeyEvent ke) {
                if (ke.getID() == java.awt.event.KeyEvent.KEY_PRESSED && ke.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
                    if (jTable1.getRowCount() > 0) {
                        int fila = (Integer) jTable1.getSelectedRow();
                        CDocumentos objDocumento = (CDocumentos) jTable1.getValueAt(fila, 1);
                        if (cajaTexto.equalsIgnoreCase("jtxtDocumentoDesde")) {
                            padre.jtxtDocumentoDesde.setText(objDocumento.folio);
                        } else if (cajaTexto.equalsIgnoreCase("jtxtDocumentoHasta")) {
                            padre.jtxtDocumentoHasta.setText(objDocumento.folio);
                        }
                        dispose();
                    }
                }
                return false;
            }
        });
        jLabel8.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jToolBar1 = new javax.swing.JToolBar();
        jBtnActualizar = new javax.swing.JButton();
        jBtnRestaurar = new javax.swing.JButton();
        jBtnSalir = new javax.swing.JButton();
        jlblMensaje = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jCBTipoFiltro = new javax.swing.JComboBox();
        jTxtFiltrar = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pólizas de CONTPAQ i");
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowIconified(java.awt.event.WindowEvent evt) {
                formWindowIconified(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Clave", "Descripcción", "Dirección", "Encargado", "Teléfono", "Título 6", "Título 7"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setToolTipText("Documentos");
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jToolBar1.setBackground(new java.awt.Color(178, 233, 187));
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jBtnActualizar.setBackground(new java.awt.Color(178, 233, 187));
        jBtnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/actualizaralm.png"))); // NOI18N
        jBtnActualizar.setToolTipText("Actualizar Almacenes");
        jBtnActualizar.setFocusable(false);
        jBtnActualizar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBtnActualizar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBtnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnActualizarActionPerformed(evt);
            }
        });
        jToolBar1.add(jBtnActualizar);

        jBtnRestaurar.setBackground(new java.awt.Color(178, 233, 187));
        jBtnRestaurar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/restaurarfiltro.png"))); // NOI18N
        jBtnRestaurar.setFocusable(false);
        jBtnRestaurar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBtnRestaurar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBtnRestaurar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnRestaurarActionPerformed(evt);
            }
        });
        jToolBar1.add(jBtnRestaurar);

        jBtnSalir.setBackground(new java.awt.Color(178, 233, 187));
        jBtnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/salir.png"))); // NOI18N
        jBtnSalir.setToolTipText("Salir");
        jBtnSalir.setFocusable(false);
        jBtnSalir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBtnSalir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBtnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnSalirActionPerformed(evt);
            }
        });
        jToolBar1.add(jBtnSalir);

        jlblMensaje.setBackground(new java.awt.Color(51, 51, 255));
        jlblMensaje.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        jCBTipoFiltro.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "N.P", "Tipo", "Folio", "Concepto", "Fecha", "Cargos", "Abonos" }));
        jCBTipoFiltro.setToolTipText("Filtrar por");

        jTxtFiltrar.setToolTipText("Filtrar");
        jTxtFiltrar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTxtFiltrarKeyReleased(evt);
            }
        });

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/filtro.png"))); // NOI18N
        jLabel8.setText("j");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCBTipoFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTxtFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCBTipoFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxtFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 651, Short.MAX_VALUE)
            .addComponent(jlblMensaje, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jlblMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void configurarTabla() {
        try {
            modelo = new javax.swing.table.DefaultTableModel() {
                public boolean isCellEditable(int fila, int col) {
                    return false;
                }
                Class[] tipos = new Class[]{Integer.class,String.class, Object.class, String.class, String.class, String.class, String.class};

                public Class getColumnClass(int col) {
                    return tipos[col];
                }
            };
            modelo.addColumn("N.P");
            modelo.addColumn("Tipo");
            modelo.addColumn("Folio");
            modelo.addColumn("Concepto");
            modelo.addColumn("Fecha");
            modelo.addColumn("Cargos");
            modelo.addColumn("Abonos");
            

            //Reordenador por columna
            jTable1.setRowSorter(new javax.swing.table.TableRowSorter(modelo));

            //Asignar tamaños de columna

            jTable1.getColumnModel().getColumn(0).setPreferredWidth(10);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(30);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(120);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(20);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(30);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(30);
            //Selección sencilla
            jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

            //No permitir mover las columnas
            jTable1.getTableHeader().setReorderingAllowed(false);
            jTable1.setModel(modelo);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void llenarTabla() {
        try {
            Statement st = conexion.createStatement();
            ResultSet rsNumReg = st.executeQuery("select count(*) "
                    + "from dbo.Polizas pol WHERE "+filtroTipos +" "+filtroPeriodos);
            int contadorFilas = 0;
            while (rsNumReg.next()) {
                contadorFilas = rsNumReg.getInt(1);
            }
            ResultSet rsAlmacen = st.executeQuery("Select "
                    + "pol.TipoPol,"
                    + "pol.Folio,"
                    + "pol.Concepto,"
                    + "pol.Fecha,"
                    + "pol.Cargos,"
                    + "pol.Abonos"
                    + " from dbo.Polizas pol WHERE "+filtroTipos +" "+filtroPeriodos);
            documentos = new Object[contadorFilas][7];
            int indice = 0;
            DecimalFormat decimalFormatPrecios = new DecimalFormat("###,##0.000");
            while (rsAlmacen.next()) {
                CDocumentos objDocumento = new CDocumentos();
                int tipoPol=rsAlmacen.getInt(1);
                if (tipoPol == 1) {
                    objDocumento.tipo  = "Ig (Ingreso)";
                } else if (tipoPol == 2) {
                    objDocumento.tipo  = "Eg (Egreso)";
                } else if (tipoPol == 3) {
                    objDocumento.tipo  = "Dr (Diario)";
                } else if (tipoPol == 6) {//Orden
                    objDocumento.tipo  = "Ch (Cheque)";
                }
                objDocumento.folio = esNulo(rsAlmacen.getString(2) + "");
                objDocumento.concepto = esNulo(rsAlmacen.getString(3) + "");
                objDocumento.fecha = rsAlmacen.getDate(4).toString();
                objDocumento.cargos = decimalFormatPrecios.format(new BigDecimal(rsAlmacen.getString(5)));
                objDocumento.abonos = decimalFormatPrecios.format(new BigDecimal(rsAlmacen.getString(5)));
                /*
                 * se agregan los datos al modelo de la tabla
                 */
                modelo.addRow(new Object[]{ indice+1,objDocumento.tipo, objDocumento, objDocumento.concepto,
                    objDocumento.fecha, objDocumento.cargos,objDocumento.abonos});
                /*
                 * llenamos el arreglo para el filtrado de adatos
                 */
                documentos[indice][0] = indice+1;
                documentos[indice][1] = objDocumento.tipo;
                documentos[indice][2] = objDocumento;
                documentos[indice][3] = objDocumento.concepto;
                documentos[indice][4] = objDocumento.fecha;
                documentos[indice][5] = objDocumento.cargos;
                documentos[indice][6] = objDocumento.abonos;
                indice++;
            }
            if(jTable1.getRowCount()>0 && filtroInicial.equals("")){
                jlblMensaje.setText("Total de registros: "+jTable1.getRowCount());
            }else{
                jlblMensaje.setText("No existen resultados para el filtro de documentos");
            }
            rsAlmacen.close();
//            conexion.close();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al mostrar los registros" + e);
        }
    }

    public String esNulo(String valorBD) {
        if (valorBD.equalsIgnoreCase("null")) {
            valorBD = "";
        }
        return valorBD;
    }

    public void limpiarTabla() {
        for (int i = jTable1.getRowCount() - 1; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }

    public void filtrar(String letra) {
        try {
            limpiarTabla();
            for (int i = 0; i < documentos.length; i++) {
                String tipoFiltro = documentos[i][jCBTipoFiltro.getSelectedIndex()].toString().trim().toUpperCase();
                if (tipoFiltro.startsWith(letra.toUpperCase())) {
                    modelo.addRow(new Object[]{documentos[i][0], documentos[i][1], documentos[i][2],
                        documentos[i][3], documentos[i][4], documentos[i][5], documentos[i][6]});
                }
            }
            if (jTable1.getRowCount() > 0) {
                jTable1.setRowSelectionInterval(0, 0);
            }
            if(jTable1.getRowCount()>0){
                jlblMensaje.setText("Total de registros: "+jTable1.getRowCount());
            }else{
                jlblMensaje.setText("No existen resultados para el filtro de documentos");
            }
        } catch (Exception e) {
//            JOptionPane.showMessageDialog(this, "Error" + e);
            e.printStackTrace();
        }
    }

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        int noClic = evt.getClickCount();
        if (noClic == 2) {
            int fila = (Integer) jTable1.getSelectedRow();
            CDocumentos objDocumento = (CDocumentos) jTable1.getValueAt(fila, 2);
            if (cajaTexto.equalsIgnoreCase("jtxtDocumentoDesde")) {
                padre.jtxtDocumentoDesde.setText(objDocumento.folio);
            } else if (cajaTexto.equalsIgnoreCase("jtxtDocumentoHasta")) {
                padre.jtxtDocumentoHasta.setText(objDocumento.folio);
            }
            this.dispose();
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTxtFiltrarKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxtFiltrarKeyReleased
        // TODO add your handling code here:
        if (jTxtFiltrar.getText().equalsIgnoreCase("")) {
            limpiarTabla();
            llenarTabla();
        } else {
            filtrar(jTxtFiltrar.getText());
        }
    }//GEN-LAST:event_jTxtFiltrarKeyReleased

    private void jBtnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnActualizarActionPerformed
        // TODO add your handling code here:
        try {
            limpiarTabla();
            llenarTabla();
            if (!jTxtFiltrar.getText().equalsIgnoreCase("")) {
                filtrar(jTxtFiltrar.getText());
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jBtnActualizarActionPerformed

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
        // TODO add your handling code here:
//        try {
//            this.setModal(false);
//            this.dispose();
//        } catch (Exception ex) {
//            ex.printStackTrace();
//        }
    }//GEN-LAST:event_formWindowLostFocus

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        try {
            this.setLocationRelativeTo(null);
            configurarTabla();
            llenarTabla();
            if (jTable1.getRowCount() > 0) {
                jTable1.setRowSelectionInterval(0, 0);
                if (!filtroInicial.equalsIgnoreCase("")) {
                    jTxtFiltrar.setText(filtroInicial);
                    jCBTipoFiltro.setSelectedIndex(1);
                    filtrar(filtroInicial);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_formWindowOpened
    private void AsignarIconos() {
        ImageIcon icono2 = (ImageIcon) jLabel8.getIcon();
        ImageIcon iconoFrame = new ImageIcon(icono2.getImage().getScaledInstance(45, 45, 20));
        this.setIconImage(iconoFrame.getImage());
    }
    private void formWindowIconified(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowIconified
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowIconified

    private void jBtnRestaurarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnRestaurarActionPerformed
        // TODO add your handling code here:
        try {
            filtroInicial="";
            limpiarTabla();
            llenarTabla();
            jTxtFiltrar.setText("");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jBtnRestaurarActionPerformed

    private void jBtnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSalirActionPerformed
        // TODO add your handling code here:
        try {
            this.dispose();
            padre.setVisible(true);
            padre.setSelected(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jBtnSalirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Documentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Documentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Documentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Documentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Documentos dialog = new Documentos(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnActualizar;
    private javax.swing.JButton jBtnRestaurar;
    private javax.swing.JButton jBtnSalir;
    private javax.swing.JComboBox jCBTipoFiltro;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JTextField jTxtFiltrar;
    private javax.swing.JLabel jlblMensaje;
    // End of variables declaration//GEN-END:variables
}
